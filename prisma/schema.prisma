// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  Favorites Favorite[]
}

model Favorite {
  id       String @id @default(uuid())
  userId   String
  recipeId String
  User     User   @relation(fields: [userId], references: [id])
  Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Recipe {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  slug             String            @unique
  name             String
  description      String
  imageSrc         String
  tags             Tag[]
  cookTime         Int
  servings         Int
  complexity       Complexity
  Instructions     Instructions?
  RecipeIngredient RecipeIngredient[]
  Favorites        Favorite[]
}

model Ingredient {
  id               String            @id @default(uuid())
  name             String
  unit             Unit
  Macros           Macros?
  RecipeIngredient RecipeIngredient[]

  @@unique([name, unit])
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  quantity     Float
  recipeId     String
  ingredientId String
  Recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  Ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Macros {
  id           String     @id @default(uuid())
  calories     Int
  carbs        Int
  protein      Int
  fats         Int
  ingredientId String     @unique
  Ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

model Instructions {
  id    String   @id @default(uuid())
  steps String[]
  tips  String[]
  swaps String[]
  Recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String @unique
}

enum Unit {
  GRAMS_100
  KILOGRAMS
  MILLILITERS_100
  LITERS
  TEASPOONS
  TABLESPOONS
  CUPS
  PIECES
}

enum Complexity {
  EASY
  MEDIUM
  HARD
}

enum Tag {
  BREAKFAST
  LUNCH
  DINNER
  DESSERT
  SNACK
  DRINK
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  NUT_FREE
  HIGH_PROTEIN
  LOW_CARB
  LOW_FAT
}